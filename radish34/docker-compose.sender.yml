version: '3.5'

services:
  ganache:
    image: trufflesuite/ganache-cli:latest
    command: ganache-cli -m 'candy maple cake sugar pudding cream honey rich smooth crumble sweet treat' --db='/chaindata' --defaultBalanceEther 10000 --account="0xdad57e191799c38233bb7897f5ca66eb42d4f2f6d05ec657f8121b57e5d3bde6, 1000000000000000000000" --account="0x5aaa244692f54da4335a8553249b0db34316fbbc6ec353e1404cf77c415e59e8, 1000000000000000000000" --account="0x70441f8ed88f91416fbe21aa007357354e9bc30236211eda0022bdfb27beb227, 1000000000000000000000" --account="0x9ff4f711a85ed35d2cc66323abcd83f41e5981e0cd395800a262beb9a92b8abf, 1000000000000000000000" --account="0x77e701995d56e775bbb06559ece7d7352157106bbadc6aa5d8781c86c8d824bd, 1000000000000000000000" --networkId '333' --gasLimit 10000000 --keepAliveTimeout 10000
    ports:
      - 8545:8545
    networks: 
      network-sender:
      network-geth:
        ipv4_address: 172.25.0.102
    volumes:
      - chaindata:/chaindata

  zkp-sender:
    container_name: zkp-sender
    build:
      context: ./zkp/
      dockerfile: dev.Dockerfile
    command: npm run dev
    volumes:
      - ./zkp/circuits:/app/circuits:delegated
      - ./zkp/src:/app/src:delegated
      - ./zkp/dist:/app/dist:delegated
      - ./zkp/output:/app/output:delegated
    environment:
      PROVING_SCHEME: 'gm17'
      VIRTUAL_HOST: radish34-zkp-sender.docker
      MONGO_URL: mongodb://mongo-sender # TODO: radish-zkp's db of proving materials shouldn't depend on the sender's mongodb. Each user should probably read proving files from their local disk rather than from a shared mongodb?
      MONGO_DB_NAME: 'radish34'
      MONGO_CONNECTION_RETRIES: 5
    networks:
      - network-sender
    depends_on:
      - mongo-sender # TODO: remove dependency on mongo-sender.
    ports:
      - 8080:80

  deploy:
    build:
      context: ./deploy/
    depends_on:
      - messenger-sender
      - mongo-sender
      - zkp-sender
      - ganache
    environment:
      RPC_PROVIDER: http://ganache:8545
      MESSENGER_SENDER_URI: http://messenger-sender:4001
      MESSENGER_RECIPIENT_URI: http://172.28.0.101:4001
      ZKP_URL: http://zkp-sender:80
    volumes:
      - ./deploy/src:/app/src:delegated
      - ./deploy/package.json:/app/package.json:delegated
      - ./contracts/artifacts:/app/artifacts:delegated
      - ./config/keystore:/keystore:delegated
      - ./config:/app/src/config
    networks:
      - network-sender
      - network-connect
    external_links: 
      - messenger-recipient:messenger-recipient

  api-sender:
    container_name: api-sender
    build:
      context: ./api/
      dockerfile: dev.Dockerfile
    command: npm run dev
    restart: on-failure
    volumes:
      - ./api/src:/app/src:delegated
      - ./api/dist:/app/dist:delegated
      - ./api/package.json:/app/package.json:delegated
      - ./config/keystore/sender.eth:/keystore/account.eth
      - ./config/config-sender.json:/app/config/default.json
      - ./contracts/artifacts:/app/artifacts:delegated
    depends_on:
      - mongo-sender
      - messenger-sender
      - redis-sender
      - merkle-tree
    environment:
      VIRTUAL_HOST: radish34-api-sender.docker
      MONGO_URL: mongodb://mongo-sender
      MONGO_DB_NAME: 'radish34'
      MONGO_CONNECTION_RETRIES: 5
      MESSENGER_URI: http://messenger-sender:4001
      REDIS_URL: redis://redis-sender:6379
      ZKP_URL: http://zkp-sender:80
      MERKLE_TREE_URL: http://merkle-tree:80
    networks:
      - network-sender
      - network-geth
    ports:
      - 8001:8001
      - 8101:8101

  mongo-sender:
    image: mongo:latest
    container_name: mongo-sender
    volumes:
      - mongo-sender:/data/db
    logging:
      options:
        max-size: 10m
    networks:
      - network-sender
    ports:
      - 27117:27017

  geth-bootnode:
    hostname: geth-bootnode
    container_name: geth-bootnode
    env_file:
      - ./geth-env/bootnode/docker.env
    build:
      context: ./geth-env
      dockerfile: ./bootnode/Dockerfile
    networks:
      network-geth:
        ipv4_address: 172.25.0.101 # The miners need to know the IP address later on
    ports:
      - 30301:30301/udp

  geth-sender:
    hostname: geth-sender
    container_name: geth-sender
    depends_on:
      - geth-bootnode
    env_file:
      - ./geth-env/miner/miner_1.env
    ports:
       - 8547:8545
       - 8548:8546
    networks:
      - network-geth
      #ipv4_address: 172.25.0.101 # The miners need to know the IP address later on
      - network-sender
    build:
      context: ./geth-env
      dockerfile: ./miner/Dockerfile
      args:
        privatekey: df504d175ae63abf209bad9dda965310d99559620550e74521a6798a41215f46
        password: pass
    healthcheck:
      test: wget http://localhost:8545
      interval: 2s
      timeout: 5s
      retries: 30

  redis-sender:
    image: redis
    container_name: redis-sender
    networks:
      - network-sender
    ports:
      - 6379:6379

  messenger-sender:
    hostname: messenger-sender
    container_name: messenger-sender
    links:
      - mongo-sender
      - redis-sender
      - geth-sender
    build:
      context: ./messenger
      dockerfile: ./Dockerfile
    env_file:
      - ./messenger/docker.env
    environment:
      VIRTUAL_HOST: messenger-sender.docker
      MONGO_URL: mongodb://mongo-sender:27017/radish34
      RADISH_API_URL: http://localhost:8101
      REDIS_URL: redis://redis-sender:6379
      USER_INDEX: 0
    networks:
      - network-sender
    ports:
     - 4001:4001

  merkle-tree:
    image: eyblockchain/timber:v2.0.1
    restart: on-failure
    depends_on:
      - mongo-merkle-tree
      - ganache
    volumes: # ensure relative paths are correct if embedding this microservice in another application:
      - ./config/merkle-tree:/app/config # mount point might be different if configuring from another application
      - ./contracts/contracts:/app/contracts:consistent # required if deploying/compiling contracts from within this service (if CONTRACT_ORIGIN = 'default' or 'compile')
    ports:
      - 9000:80
    environment:
      BLOCKCHAIN_HOST: ws://ganache
      BLOCKCHAIN_PORT: 8545
      CONTRACT_ORIGIN: 'compile' # Where to find the contractInstances?
      # Specify one of:
      # - 'remote' (to GET a solc-compiled contract interface json from a remote microservice); or
      # - 'mongodb' (to get a solc-compiled contract interface json from mongodb); or
      # - 'default' (to get a solc-compiled contract interface json from the app/build/ folder)
      # - 'compile' (to compile contracts from a .sol file, at startup, with solc, from the /app/contracts/ folder). Useful if the application using Timber doesn't use solc to generate contract interface json's.
    networks:
      network-sender:
      network-connect:
        ipv4_address: 172.28.0.103

  # The database storing the merkle tree
  mongo-merkle-tree:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=merkle_tree
    volumes:
      - ./config/merkle-tree/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - mongo-merkle-tree-volume:/data/db
    networks:
      - network-sender
    ports:
      - 27417:27017

volumes:
  mongo-sender:
  mongo-merkle-tree-volume:
  chaindata:

networks:
  network-geth:
    driver: bridge
    ipam:
      config:
      - subnet: 172.25.0.0/24
  network-sender:
  network-connect:
    driver: bridge
    ipam:
      config:
      - subnet: 172.28.0.0/24
  
  
